<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GC和GC Tuning</title>
    <url>/2020/02/22/GC/</url>
    <content><![CDATA[<h3 id="GC的基础知识"><a href="#GC的基础知识" class="headerlink" title="GC的基础知识"></a>GC的基础知识</h3><h4 id="什么是垃圾"><a href="#什么是垃圾" class="headerlink" title="什么是垃圾"></a>什么是垃圾</h4><p>没有任何引用指向的一个对象或者多个对象（循环引用）</p>
<h4 id="如何定位垃圾"><a href="#如何定位垃圾" class="headerlink" title="如何定位垃圾"></a>如何定位垃圾</h4><ol>
<li>引用计数（ReferenceCount）</li>
<li>根可达算法(RootSearching)</li>
</ol>
<h4 id="常见的垃圾回收算法"><a href="#常见的垃圾回收算法" class="headerlink" title="常见的垃圾回收算法"></a>常见的垃圾回收算法</h4><ol>
<li>标记清除(mark sweep) - 位置不连续 产生碎片 效率偏低（两遍扫描）</li>
<li>拷贝算法 (copying) - 没有碎片，浪费空间</li>
<li>标记压缩(mark compact) - 没有碎片，效率偏低（两遍扫描，指针需要调整）<a id="more"></a>

</li>
</ol>
<h4 id="JVM内存分代模型（用于分代垃圾回收算法）"><a href="#JVM内存分代模型（用于分代垃圾回收算法）" class="headerlink" title="JVM内存分代模型（用于分代垃圾回收算法）"></a>JVM内存分代模型（用于分代垃圾回收算法）</h4><ol>
<li>部分垃圾回收器使用的模型<br>除Epsilon ZGC Shenandoah之外的GC都是使用逻辑分代模型<br>G1是逻辑分代，物理不分代<br>除此之外不仅逻辑分代，而且物理分代  </li>
<li>新生代 + 老年代 + 永久代（1.7）Perm Generation/ 元数据区(1.8) Metaspace<ol>
<li>永久代 元数据 - Class</li>
<li>永久代必须指定大小限制 ，元数据可以设置，也可以不设置，无上限（受限于物理内存）</li>
<li>字符串常量 1.7 - 永久代，1.8 - 堆</li>
<li>MethodArea逻辑概念 - 永久代、元数据</li>
</ol>
</li>
<li>新生代 = Eden + 2个suvivor区 <ol>
<li>YGC回收之后，大多数的对象会被回收，活着的进入s0</li>
<li>再次YGC，活着的对象eden + s0 -&gt; s1</li>
<li>再次YGC，eden + s1 -&gt; s0</li>
<li>年龄足够 -&gt; 老年代 （-XX:MaxTenuringThreshold=X X默认是15）</li>
<li>s区装不下 -&gt; 老年代</li>
</ol>
</li>
<li>老年代<ol>
<li>顽固分子</li>
<li>老年代满了FGC Full GC</li>
<li>内存分配担保，在JVM在内存分配的时候，新生代内存不足时，把新生代的存活的对象搬到老生代，然后新生代腾出来的空间用于为分配给最新的对象。</li>
</ol>
</li>
<li>GC Tuning (Generation)<ol>
<li>尽量减少FGC</li>
<li>MinorGC = YGC</li>
<li>MajorGC = FGC</li>
</ol>
</li>
</ol>
<h3 id="垃圾回收器及调优"><a href="#垃圾回收器及调优" class="headerlink" title="垃圾回收器及调优"></a>垃圾回收器及调优</h3><h4 id="常见的垃圾回收器"><a href="#常见的垃圾回收器" class="headerlink" title="常见的垃圾回收器"></a>常见的垃圾回收器</h4><p><img src="https://casparthh.github.io/2020/02/22/GC/gc.png" alt="常用垃圾回收器"></p>
<ol>
<li><p>JDK诞生 Serial追随，为提高效率，诞生了PS，为了配合CMS，诞生了PN，CMS是1.4版本后期引入，CMS是里程碑式的GC，它开启了并发回收的过程，并发垃圾回收是因为无法忍受STW。</p>
</li>
<li><p>Serial：适用年轻代，串行回收</p>
</li>
<li><p>PS(Parallel Scavenge) 适用年轻代，并行回收</p>
</li>
<li><p>ParNew 适用年轻代，配合CMS的并行回收</p>
</li>
<li><p>SerialOld 适用老年代</p>
</li>
<li><p>ParallelOld 适用老年代，配合PS使用</p>
</li>
<li><p>CMS(ConcurrentMarkSweep) 老年代,并发的，垃圾回收和应用程序同时运行，降低STW(Stop The World)的时间(200ms)<br>CMS问题比较多，所以现在没有一个版本默认是CMS，只能手工指定<br>CMS既然是MarkSweep，就一定会有碎片化的问题，碎片到达一定程度，CMS的老年代分配对象分配不下的时候，使用SerialOld 进行老年代回收<br>算法：三色标记 + Incremental Update<br>工作过程：初始标记，并发标记，重新标记，并发清理<br>优点：并发收集，低停顿<br>缺点：占用大量的CPU，无法处理浮动垃圾，出现Concurrent Mode Failure，空间碎片  </p>
</li>
<li><p>G1(10ms)<br>算法：三色标记 + SATB (snapshot-at-the-beginning)<br>优势：并行与并发，分代收集，空间整合，可预测的停顿<br>步骤：初使标记，并发标记，最终标记，筛选回收  </p>
</li>
<li><p>ZGC (1ms)<br>算法：ColoredPointers + LoadBarrier</p>
</li>
<li><p>Shenandoah<br>算法：ColoredPointers + WriteBarrier</p>
</li>
<li><p>PS 和 PN区别的延伸阅读：<br>▪<a href="https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html</a></p>
</li>
<li><p>垃圾收集器跟内存大小的关系</p>
<ol>
<li>Serial 几十兆</li>
<li>PS 上百兆 - 几个G</li>
<li>CMS - 20G</li>
<li>G1 - 上百G</li>
<li>ZGC - 4T - 16T（JDK13）  </li>
</ol>
</li>
<li><p>1.8默认的垃圾回收：PS + ParallelOld</p>
</li>
</ol>
<h4 id="常见垃圾回收器组合参数设定：-1-8"><a href="#常见垃圾回收器组合参数设定：-1-8" class="headerlink" title="常见垃圾回收器组合参数设定：(1.8)"></a>常见垃圾回收器组合参数设定：(1.8)</h4><ul>
<li>-XX:+UseSerialGC = Serial New (DefNew) + Serial Old<ul>
<li>小型程序。默认情况下不会是这种选项，HotSpot会根据计算及配置和JDK版本自动选择收集器</li>
</ul>
</li>
<li>-XX:+UseParNewGC = ParNew + SerialOld<ul>
<li>这个组合已经很少用（在某些版本中已经废弃）</li>
</ul>
</li>
<li>-XX:+UseConcurrentMarkSweepGC = ParNew + CMS + Serial Old</li>
<li>-XX:+UseParallelGC = Parallel Scavenge + Parallel Old (1.8默认) 【PS + SerialOld】</li>
<li>-XX:+UseParallelOldGC = Parallel Scavenge + Parallel Old</li>
<li>-XX:+UseG1GC = G1</li>
</ul>
<h4 id="JVM调优第一步，了解JVM常用命令行参数"><a href="#JVM调优第一步，了解JVM常用命令行参数" class="headerlink" title="JVM调优第一步，了解JVM常用命令行参数"></a>JVM调优第一步，了解JVM常用命令行参数</h4><ul>
<li><p>JVM的命令行参数参考：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p>
</li>
<li><p>HotSpot参数分类<br>  标准： - 开头，所有的HotSpot都支持<br>  非标准：-X 开头，特定版本HotSpot支持特定命令<br>  不稳定：-XX 开头，下个版本可能取消<br>  java -X  </p>
<ol>
<li>区分概念：内存泄漏memory leak，内存溢出out of memory</li>
<li>java -XX:+PrintCommandLineFlags -version 观查虚拟机配置</li>
<li>java -XX:+PrintFlagsInitial 默认参数值</li>
<li>java -XX:+PrintFlagsFinal 最终参数值</li>
<li>java -XX:+PrintFlagsFinal | grep xxx 找到对应的参数</li>
<li>java -XX:+PrintFlagsFinal -version |grep GC</li>
</ol>
</li>
</ul>
<h4 id="调优前的基础概念："><a href="#调优前的基础概念：" class="headerlink" title="调优前的基础概念："></a>调优前的基础概念：</h4><ol>
<li>吞吐量：吞吐量（CPU用于运行用户代码的时间与CPU消耗的总时间的比值）用户代码时间 /（用户代码执行时间 + 垃圾回收时间）</li>
<li>响应时间：STW越短，响应时间越好</li>
</ol>
<p>所谓调优，首先确定，追求啥？吞吐量优先，还是响应时间优先？还是在满足一定的响应时间的情况下，要求达到多大的吞吐量…</p>
<p>问题：<br>科学计算，吞吐量。数据挖掘，thrput。吞吐量优先的一般：（PS + PO）<br>响应时间：网站 GUI API （1.8 G1）  </p>
<h4 id="什么是调优？"><a href="#什么是调优？" class="headerlink" title="什么是调优？"></a>什么是调优？</h4><ol>
<li>根据需求进行JVM规划和预调优</li>
<li>优化运行JVM运行环境（慢，卡顿）</li>
<li>解决JVM运行过程中出现的各种问题(OOM)</li>
</ol>
<h4 id="调优，从规划开始"><a href="#调优，从规划开始" class="headerlink" title="调优，从规划开始"></a>调优，从规划开始</h4><ul>
<li><p>调优，从业务场景开始，没有业务场景的调优都是耍流氓</p>
</li>
<li><p>无监控（压力测试，能看到结果），不调优</p>
</li>
<li><p>步骤：</p>
<ol>
<li>熟悉业务场景（没有最好的垃圾回收器，只有最合适的垃圾回收器）<ol>
<li>响应时间、停顿时间 [CMS G1 ZGC] （需要给用户作响应）</li>
<li>吞吐量 = 用户时间 /( 用户时间 + GC时间) [PS]</li>
</ol>
</li>
<li>选择回收器组合</li>
<li>计算内存需求（经验值）</li>
<li>选定CPU（越高越好）</li>
<li>设定年代大小、升级年龄</li>
<li>设定日志参数<ol>
<li>-Xloggc:/opt/xxx/logs/xxx-xxx-gc-%t.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCCause</li>
<li>或者每天产生一个日志文件</li>
</ol>
</li>
<li>观察日志情况</li>
</ol>
</li>
</ul>
<h4 id="解决JVM运行中的问题"><a href="#解决JVM运行中的问题" class="headerlink" title="解决JVM运行中的问题"></a>解决JVM运行中的问题</h4><ol>
<li><p>top命令观察问题：内存 &amp; CPU 占用率。</p>
</li>
<li><p>top -Hp 观察进程中的线程，哪个线程CPU和内存占比高</p>
</li>
<li><p>jps(java process status) 参数 -mlv 定位具体java进程<br>jstack 定位线程状况，重点关注：WAITING BLOCKED<br>eg.<br>waiting on &lt;0x0000000088ca3310&gt; (a java.lang.Object)<br>假如有一个进程中100个线程，很多线程都在waiting on <xx> ，一定要找到是哪个线程持有这把锁<br>怎么找？搜索jstack dump的信息，找<xx> ，看哪个线程持有这把锁RUNNABLE</xx></xx></p>
</li>
<li><p>为什么阿里规范里规定，线程的名称（尤其是线程池）都要写有意义的名称<br>怎么样自定义线程池里的线程名称？（自定义ThreadFactory）</p>
</li>
<li><p>jinfo pid<br>jinfo 是 JDK 自带的命令，可以用来查看正在运行的 java 应用程序的扩展参数，包括Java System属性和JVM命令行参数；也可以动态的修改正在运行的 JVM 一些参数。</p>
</li>
<li><p>jstat -gc 动态观察gc情况 / 阅读GC日志发现频繁GC / arthas观察 / jconsole/jvisualVM/ Jprofiler（最好用）<br>jstat -gc|gcnew|gcold|gcutil <pid> 500 10 : 每个500个毫秒打印GC的情况，共打印10次退出<br>jstat -class <pid>   观察加载类的数量<br>jstat -options       查看所有options  </pid></pid></p>
</li>
<li><p>jmap 一个可以输出所有内存中对象的工具，甚至可以将VM 中的heap，以二进制输出成文本。<br>jmap -heap <pid>   -heap 打印heap的概要信息，GC使用的算法，heap（堆）的配置及JVM堆内存的使用情况.<br>jmap - histo 4655 | head -20，查找有多少对象产生<br>jmap -dump:format=b,file=xxx pid<br> -dump 使用hprof二进制形式,输出jvm的heap内容到文件=.  live子选项是可选的，假如指定live选项,那么只输出活的对象到文件<br> 线上系统，内存特别大，jmap执行期间会对进程产生很大影响，甚至卡顿，<font color="red">线上慎用</font>（电商不适合用）<br> 1：-XX:+HeapDumpOnOutOfMemoryError 设定了参数HeapDump，OOM的时候会自动产生堆转储文件<br> 2：很多服务器备份（高可用），停掉这台服务器对其他服务器不影响<br> 3：用在线定位</pid></p>
</li>
<li><p>使用MAT / jhat /jvisualvm 进行dump文件分析<br> Jhat参考资料：<a href="https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html" target="_blank" rel="noopener">https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html</a> </p>
</li>
</ol>
<h4 id="Arthas在线排查工具"><a href="#Arthas在线排查工具" class="headerlink" title="Arthas在线排查工具"></a>Arthas在线排查工具</h4><ul>
<li>为什么需要在线排查？<br> 在生产上我们经常会碰到一些不好排查的问题，例如线程安全问题，用最简单的threaddump或者heapdump不好查到问题原因。为了排查这些问题，有时我们会临时加一些日志，比如在一些关键的函数里打印出入参，然后重新打包发布，如果打了日志还是没找到问题，继续加日志，重新打包发布。对于上线流程复杂而且审核比较严的公司，从改代码到上线需要层层的流转，会大大影响问题排查的进度。 </li>
<li>观察jvm信息</li>
<li>thread定位线程问题</li>
<li>dashboard 观察系统情况</li>
<li>heapdump + jhat分析</li>
<li>jad反编译<br> 动态代理生成类的问题定位<br> 第三方的类（观察代码）<br> 版本问题（确定自己最新提交的版本是不是被使用）  </li>
<li>redefine 热替换<br> 目前有些限制条件：只能改方法实现（方法已经运行完成），不能改方法名， 不能改属性</li>
<li>sc  - search class</li>
<li>watch  - watch method</li>
<li>没有包含的功能：jmap</li>
</ul>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><h4 id="GC算法的基础概念"><a href="#GC算法的基础概念" class="headerlink" title="GC算法的基础概念"></a>GC算法的基础概念</h4><ul>
<li>Card Table<br>由于做YGC时，需要扫描整个OLD区，效率非常低，所以JVM设计了CardTable， 如果一个OLD区CardTable中有对象指向Y区，就将它设为Dirty，下次扫描时，只需要扫描Dirty Card<br>在结构上，Card Table用BitMap来实现</li>
</ul>
<h4 id="GC常用参数"><a href="#GC常用参数" class="headerlink" title="GC常用参数"></a>GC常用参数</h4><ul>
<li>-Xmn -Xms -Xmx -Xss<br>年轻代 最小堆 最大堆 栈空间</li>
<li>-XX:+UseTLAB<br>使用TLAB，默认打开</li>
<li>-XX:+PrintTLAB<br>打印TLAB的使用情况</li>
<li>-XX:TLABSize<br>设置TLAB大小</li>
<li>-XX:+DisableExplictGC<br>System.gc()不管用 ，FGC</li>
<li>-XX:+PrintGC</li>
<li>-XX:+PrintGCDetails</li>
<li>-XX:+PrintHeapAtGC</li>
<li>-XX:+PrintGCTimeStamps</li>
<li>-XX:+PrintGCApplicationConcurrentTime (低) 打印应用程序时间</li>
<li>-XX:+PrintGCApplicationStoppedTime （低） 打印暂停时长</li>
<li>-XX:+PrintReferenceGC （重要性低）记录回收了多少种不同引用类型的引用</li>
<li>-verbose:class 类加载详细过程</li>
<li>-XX:+PrintVMOptions</li>
<li>-XX:+PrintFlagsFinal  -XX:+PrintFlagsInitial  必须会用</li>
<li>-Xloggc:/opt/log/gc.log</li>
<li>-XX:MaxTenuringThreshold 升代年龄，最大值15</li>
<li>-XX:PretenureSizeThreshold=1M //大对象直接存入老年代,默认值是0，意思是不管多大都是先在eden中分配内存</li>
<li>锁自旋次数 -XX:PreBlockSpin 热点代码检测参数-XX:CompileThreshold 逃逸分析 标量替换 这些不建议设置</li>
</ul>
<h4 id="Parallel常用参数"><a href="#Parallel常用参数" class="headerlink" title="Parallel常用参数"></a>Parallel常用参数</h4><ul>
<li>-XX:SurvivorRatio</li>
<li>-XX:+ParallelGCThreads 并行收集器的线程数，同样适用于CMS，一般设为和CPU核数相同</li>
<li>-XX:+UseAdaptiveSizePolicy 自动选择各区大小比例</li>
</ul>
<h4 id="CMS常用参数"><a href="#CMS常用参数" class="headerlink" title="CMS常用参数"></a>CMS常用参数</h4><ul>
<li>-XX:+UseConcMarkSweepGC</li>
<li>-XX:ParallelCMSThreads CMS线程数量</li>
<li>-XX:CMSInitiatingOccupancyFraction<br>使用多少比例的老年代后开始CMS收集，默认是68%(近似值)，如果频繁发生SerialOld卡顿，应该调小，（频繁CMS回收）</li>
<li>-XX:+UseCMSCompactAtFullCollection<br>在FGC时进行压缩</li>
<li>-XX:CMSFullGCsBeforeCompaction<br>多少次FGC之后进行压缩</li>
<li>-XX:+CMSClassUnloadingEnabled</li>
<li>-XX:CMSInitiatingPermOccupancyFraction<br>达到什么比例时进行Perm回收</li>
<li>GCTimeRatio<br>设置GC时间占用程序运行时间的百分比</li>
<li>-XX:MaxGCPauseMillis<br>停顿时间，是一个建议时间，GC会尝试用各种手段达到这个时间，比如减小年轻代</li>
<li>-XX:LargePageSizeInBytes=64m 内存分页</li>
</ul>
<h4 id="G1常用参数"><a href="#G1常用参数" class="headerlink" title="G1常用参数"></a>G1常用参数</h4><ul>
<li>-XX:+UseG1GC</li>
<li>-XX:MaxGCPauseMillis<br>建议值，G1会尝试调整Young区的块数来达到这个值</li>
<li>-XX:GCPauseIntervalMillis<br>设置停顿间隔时间</li>
<li>-XX:+G1HeapRegionSize<br>分区大小，建议逐渐增大该值，1 2 4 8 16 32。<br>随着size增加，垃圾的存活时间更长，GC间隔更长，但每次GC的时间也会更长<br>ZGC做了改进（动态区块大小）</li>
<li>G1NewSizePercent<br>新生代最小比例，默认为5%</li>
<li>G1MaxNewSizePercent<br>新生代最大比例，默认为60%</li>
<li>GCTimeRatio<br>GC时间建议比例，G1会根据这个值调整堆空间</li>
<li>ConcGCThreads<br>线程数量</li>
<li>InitiatingHeapOccupancyPercent<br>启动G1的堆空间占用比例</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://docs.oracle.com/en/java/javase/13/" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/13/</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></li>
<li><a href="http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp" target="_blank" rel="noopener">http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp</a></li>
<li>JVM调优参考文档：<a href="https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#GUID-8A443184-7E07-4B71-9777-4F12947C8184" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#GUID-8A443184-7E07-4B71-9777-4F12947C8184</a></li>
<li><a href="https://www.oracle.com/technical-resources/articles/java/g1gc.html" target="_blank" rel="noopener">https://www.oracle.com/technical-resources/articles/java/g1gc.html</a> </li>
<li>Arthas：<a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a><ol>
<li>启动arthas java -jar arthas-boot.jar</li>
<li>绑定java进程</li>
<li>dashboard命令观察系统整体情况</li>
<li>help 查看帮助</li>
<li>help xx 查看具体命令帮助</li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM ClassLoader</title>
    <url>/2020/02/22/ClassLoader/</url>
    <content><![CDATA[<h4 id="类加载-初始化"><a href="#类加载-初始化" class="headerlink" title="类加载-初始化"></a>类加载-初始化</h4><p><img src="https://casparthh.github.io/2020/02/22/ClassLoader/ClassLoader.png" alt="JVM ClassLoader"></p>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>多线程与高并发</title>
    <url>/2020/02/16/thread/</url>
    <content><![CDATA[<p>线程: 作为一个进程里面最小的执行单元它就叫一个线程，用简单的话讲一个程序里不同的执行路径就叫做一个线程</p>
<h4 id="一、创建线程的几种方式："><a href="#一、创建线程的几种方式：" class="headerlink" title="一、创建线程的几种方式："></a>一、创建线程的几种方式：</h4><h6 id="1-继承Thread，并重写该类的run方法"><a href="#1-继承Thread，并重写该类的run方法" class="headerlink" title="1. 继承Thread，并重写该类的run方法"></a>1. 继承Thread，并重写该类的run方法</h6><a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">" 是继承写法。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.setName(<span class="string">"extends thread"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-通过Runnable接口创建线程类-创建-Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。"><a href="#2-通过Runnable接口创建线程类-创建-Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。" class="headerlink" title="2. 通过Runnable接口创建线程类,创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。"></a>2. 通过Runnable接口创建线程类,创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">" 写法。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(),<span class="string">"implements Runnable"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-通过Callable和Future创建线程"><a href="#3-通过Callable和Future创建线程" class="headerlink" title="3. 通过Callable和Future创建线程"></a>3. 通过Callable和Future创建线程</h6><pre><code>- 创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。
- 创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。
- 使用FutureTask对象作为Thread对象的target创建并启动新线程。
- 调用FutureTask对象的get()方法来获得子线程执行结束后的返回值</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallableThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">" 写法。"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(<span class="keyword">new</span> MyCallableThread());</span><br><span class="line">        <span class="keyword">new</span> Thread(task,<span class="string">"implements Callable"</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"有返回值："</span> + task.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="二、-线程操作的几个方法"><a href="#二、-线程操作的几个方法" class="headerlink" title="二、 线程操作的几个方法"></a>二、 线程操作的几个方法</h4><ul>
<li>start: 启动一个新的线程,start方法必须子线程第一个调用的方法，start不能够重复调用，新线程会调用runnable接口提供的run方法</li>
<li>run: run方法是子线程的执行体，子线程从进入run方法开始直至run方法执行接收意味着子线程的任务执行接收， 在主线程直接调用run方法是不能创建子线程，只是普通方法调用</li>
<li>sleep: 睡眠，当前线程暂停一段时间让给别的线程去运行。Sleep是怎么复活由睡眠时间而定，等睡眠到规定的时间自动复活.</li>
<li>Yield: 就是当前线程正在执行的时候停止下来进入等待队列，回到等待队列里在系统的调度算法里头，还是依然有可能把你刚回去的这个线程拿回来继续执行，当然，更大的可能性是把原来等待的那些拿出一个来执行，所以yield的意思是我让出一下CPU，后面你们能不能抢到那我不管</li>
<li>join: 意思就是在自己当前线程加入你调用Join的线程()，本线程等待。等调用的线程运行 完了，自己再去执行。t1和t2两个线程，在t1的某个点上调用了t2.join,它会跑到t2去运行，t1等待t2运 行完毕继续t1运行(自己join自己没有意义)</li>
</ul>
<p>wait() 和 notify() 方法说明几点：</p>
<ol>
<li>调用notify() 方法导致解除阻塞的线程是从因调用该对象的 wait() 方法而阻塞的线程中<strong>随机</strong>选取的，我们无法预料哪一个线程将会被选择，所以编程时要特别小心，避免因这种不确定性而产生问题。</li>
<li>除了notify()，还有一个方法 notifyAll() 也可起到类似作用，唯一的区别在于，调用 notifyAll() 方法将把因调用该对象的 wait() 方法而阻塞的所有线程一次性全部解除阻塞。当然，只有获得锁的那一个线程才能进入可执行状态。</li>
<li>wait()法需要释放锁，所以必须在synchronized中使用，否则会抛出异常 IllegalMonitorStateException</li>
<li>notify()方法也必须在synchronized中使用，并且应该指定对象 </li>
<li>synchronized()、wait()、notify()对象必须一致，一个synchronized()代码块中只能有一个线程调</li>
</ol>
<h4 id="三、线程六种状态"><a href="#三、线程六种状态" class="headerlink" title="三、线程六种状态"></a>三、线程六种状态</h4><ol>
<li>初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。</li>
<li>运行(RUNNABLE)：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。<br>线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。</li>
<li>阻塞(BLOCKED)：表示线程阻塞于锁。</li>
<li>等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。</li>
<li>超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。</li>
<li>终止(TERMINATED)：表示该线程已经执行完毕。<br><img src="https://casparthh.github.io/2020/02/16/thread/status.jpg" alt="线程状态转换图"></li>
</ol>
<p>*线程什么状态时候会被挂起?挂起是否也是一个状态?<br>Running的时候，在一个cpu上会跑很多个线程，cpu会隔一段时间执行这个线程一下，在隔一段时间执行那个线程一下，这个是cpu内部的一个调度，从running扔回去就叫线程被挂起。</p>
<h4 id="四、synchronized"><a href="#四、synchronized" class="headerlink" title="四、synchronized"></a>四、synchronized</h4><p>多个线程去访问同一个资源的时候对这个资源上锁  </p>
<ul>
<li>synchronized 使用方法和特性<ul>
<li>在同步代码外嵌套synchronized(Object/Class)</li>
<li>synchronized方法和synchronized(this)执行这段代码它是等值的</li>
<li>每次都定义个一个锁的对象Object o 把它new出来，那加锁的时候太麻烦每次都要new一个新的对象出来，所以呢，有一个简单的方式就是 synchronized(this)锁定当前对象就行</li>
<li>静态方法static是没有this对象的，你不需要new出一个对象来就能执行这个方法，但如果这个这个上面加一个synchronized的话就代表synchronized(T.class)。这里这个synchronized(T.class)锁的就是T类的对象</li>
<li>类锁和对象锁互不干扰，只有当监视的是同一个class（Class对象）的锁或同一个对象实例的锁才发生互斥</li>
<li>可重入，一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个对象的锁，再次申请的时候仍然会得到该对象的锁</li>
<li>程序在执行过程中，如果出现异常，默认情况锁会被释放所以，在并发处理的过程中，有异常要多加小心，不然可能会发生不一致的情况。比如，在一个web app处理过程中，多个servlet线程共同访问同一个资源，这时如果异常处理不合适， * 在第一个线程中抛出异常，其他线程就会进入同步代码区，有可能会访问到异常产生时的数据。因此要非常小心的处理同步业务逻辑中的异常</li>
<li>如果锁的是new出来的对象，在某一种特定的不小心的情况下你把o变成了别的对象了，这个时候线程的并发就会出问题。锁是在对象的头上两位来作为代表的，你这线程本来大家都去访问这两位了，结果突然把 这把锁变成别的对象，去访问别的对象的两位了，这俩之间就没有任何关系了。因此，以对象作为锁的 时候不让它发生改变，加final。</li>
</ul>
</li>
</ul>
<h4 id="五、锁升级的概念"><a href="#五、锁升级的概念" class="headerlink" title="五、锁升级的概念"></a>五、锁升级的概念</h4><p>原来要去找操作系统，要找内核去申请这把锁，到后期做了对 synchronized的一些改进，他的效率比原来要改变了不少，改进的地方。当我们使用synchronized的 时候HotSpot的实现是这样的:<br>上来之后第一个去访问某把锁的线程 比如sync (Object) ，来了之后先在 这个Object的头上面markword记录这个线程。(如果只有第一个线程访问的时候实际上是没有给这个 Object加锁的，在内部实现的时候，只是记录这个线程的ID(偏向锁))。<br>偏向锁如果有线程争用的话，就升级为自旋锁，概念就是(有一个哥们儿在蹲马桶 ，另外来了一个哥 们，他就在旁边儿等着，他不会跑到cpu的就绪队列里去，而就在这等着占用cpu，用一个while的循环 在这儿转圈玩儿， 很多圈之后不行的话就再一次进行升级)。<br>自旋锁转圈十次之后，升级为重量级锁，重量级锁就是去操作系统那里去申请资源。这是一个锁升级的过程。  </p>
<h4 id="六、volatile"><a href="#六、volatile" class="headerlink" title="六、volatile"></a>六、volatile</h4><p>使一个变量在多个线程中可见，保证线程的可见性，同时防止指令重排序。线程可见性在CPU的级别是用缓存一直性来保 证的;禁止指令重排序CPU级别是你禁止不了的，那是人家内部运行的过程，提高效率的。但是在 虚拟机级别你家volatile之后呢，这个指令重排序就可以禁止。严格来讲，还要去深究它的内部的 话，它是加了读屏障和写屏障，这个是CPU的一个原语。<br>A B线程都用到一个变量，java默认是A线程中保留一份copy,这样如果B线程修改了该变量，则A线程未必知道，使用volatile关键字，会让所有线程都会读到变量的修改值<br>并不能保证多个线程共同修改running变量时所带来的不一致问题，也就是说volatile不能替代synchronized  </p>
<h4 id="七、CAS-比较和交换（Conmpare-And-Swap"><a href="#七、CAS-比较和交换（Conmpare-And-Swap" class="headerlink" title="七、CAS 比较和交换（Conmpare And Swap)"></a>七、CAS 比较和交换（Conmpare And Swap)</h4><p>它将内存位置的内容与给定值进行比较，只有在相同的情况下，将该内存位置的内容修改为新的给定值。 这是作为单个原子操作完成的。 原子性保证新值基于最新信息计算; 如果该值在同一时间被另一个线程更新，则写入将失败。<br>凡是以Atomic开头的都是用CAS这种操作来保证线程安全的这么一些个类。AtomicInteger的意思就是里面包了一个Int类型，这个int类型的自增 count++ 是线程安全的，还有拿值等等是线程安全的，由于我们在工作开发中经常性的有那种需求，一个值所有的线程共同访问它往 上递增 ，所以jdk专门提供了这样的一些类。<br>它的内部调用，就会跑到Unsafe类去(不安全的)，Unsafe中对CAS的实现是C++写的。也就是说AtomicInteger它的内部是调用了 Unsafe这个类里面的方法CompareAndSetI(CAS)。这个比较并且设定的意思是什么呢，我原来想改变某一个值0 ，我想把它变成1，但是其中我想做到线程安全，就只能加锁synchronized ，不然线程就不安全。我现在可以用另外一种操作来替代这把锁，就是cas操作，你可以把它想象成一个方法，这个方法有三个参数，cas(V，Expected，NewValue)。<br>V第一个参数是要改的那个值;Expected第二个参数是期望当前的这个值会是几;NewValue要设定的新值。当前这个线程想改这个值的时候我期望你这值就是0，你不能是个1，如果是1就说明我这值不对，然后想把你变成1。<br>当你判断的时候，发现是我期望的值，还没有进行新值设定的时候值发生了改变怎么办，cas是cpu的原语支持，也就是说cas操作是cpu指令级别上的支持，中间不能被打断。  </p>
<p>ABA问题：<br>假如说你有一个值，我拿到这个值是1，想把它变成2，我拿到1用cas操作，期望值是1，准备变成2，这个对象Object，在这个过程中，没有一个线程改过我肯定是可以更改的，但是 如果有一个线程先把这个1变成了2后来又变回1，中间值更改过，它不会影响我这个cas下面操作，这就是ABA问题。 这种问题怎么解决。如果是int类型的，最终值是你期望的，也没有关系，这种没关系可以不去管这个问题。如果你确实想管这个问题可以加版本号，做任何一个值的修改，修改完之后加一，后面检查的时候连带版本号一起检查。  </p>
<h4 id="八、Atomic-类"><a href="#八、Atomic-类" class="headerlink" title="八、Atomic 类"></a>八、Atomic 类</h4><p>AtomXXX类本身方法都是原子性的，但不能保证多个方法连续调用是原子性的<br>多线程对一个数进行递增方法:</p>
<ol>
<li>一个long类型的数，递增的时候我们加锁; </li>
<li>使用AtomicLong可以让它不断的往上递增;</li>
<li>LongAdder;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Incrementer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Long counter1 = <span class="keyword">new</span> Long(<span class="number">0L</span>);</span><br><span class="line">    <span class="keyword">static</span> AtomicLong counter2 = <span class="keyword">new</span> AtomicLong(<span class="number">0L</span>);</span><br><span class="line">    <span class="keyword">static</span> LongAdder counter3 = <span class="keyword">new</span> LongAdder();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Object o = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//synchronized</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (o) &#123;  <span class="comment">//去掉锁之后结果就有问题</span></span><br><span class="line">                    counter1= counter1+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//AtomicLong</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                    counter2.incrementAndGet();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//LongAdder</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                    counter3.increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//简单处理，休眠主线程等上面的计算线程完成。</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(counter1);</span><br><span class="line">        System.out.println(counter2);</span><br><span class="line">        System.out.println(counter3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="九、基于CAS的一些新类型的锁"><a href="#九、基于CAS的一些新类型的锁" class="headerlink" title="九、基于CAS的一些新类型的锁"></a>九、基于CAS的一些新类型的锁</h4><h6 id="1-RenentrantLock-可重入锁"><a href="#1-RenentrantLock-可重入锁" class="headerlink" title="1. RenentrantLock 可重入锁"></a>1. RenentrantLock 可重入锁</h6><ul>
<li><p>ReentrantLock是可以替代synchronized的,</p>
</li>
<li><p>需要手动枷锁，手动解锁、可以出现多个不同的等待队列</p>
</li>
<li><p>ReentrantLock有一些功能还是要比synchronized强大的，强大的地方，你可以使用tryLock进行尝试 锁定，不管锁定与否，方法都将继续执行，synchronized如果搞不定的话他肯定就阻塞了，但是用 ReentrantLock你自己就可以决定你到底要不要wait。</p>
</li>
<li><p>原来写synchronized的地方换 写lock.lock()，加完锁之后需要注意的是记得lock.unlock()解锁，由于synchronized是自动解锁的，大括号执行完就结束了。lock就不行，lock必须得手动解锁，手动解锁一定要写在try…finally里面保证最好一定要解锁，不然的话上锁之后中间执行的过程有问题了，死在那了，别人就永远也拿不到这把锁了。</p>
</li>
<li><p>ReentrantLock还可以用lock.lockInterruptibly()这个类，对interrupt()方法做出相应，可以被打断的加锁，如果以这种方式加锁的话我们可以调用一个t2.interrupt(); 打断线程2的等待。</p>
</li>
<li><p>ReentrantLock还可以指定为公平锁，公平锁的意思是当我们new一个ReentrantLock你可以传一个参数为true，这个true表示公平锁，公平锁的意思是谁等在前面就先让谁执行，而不是说谁后来了之后就马上让谁执行。如果说这个锁不公平，来了一个线程上来就抢，它是有可能先抢到的。（是否公平锁分别有NonfairSync &amp; FairSync 两个不同的实现）</p>
</li>
<li><p>除了synchronized之外，多数内部都是用的cas。AQS的实际上它内部用的是 park和unpark，也不是全都用的cas,他还是做了一个锁升级的概念，只不过这个锁升级做的比较隐秘， 在等待这个队列的时候如果你拿不到还是进入一个阻塞的状态，前面至少有一个cas的状态，他不像原先就直接进入阻塞状态了。（参考后面的源码阅读部分）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Integer i = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">100</span> ; k++) &#123;</span><br><span class="line">                    lock.lock();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="comment">// 必须要必须要必须要手动释放锁,必须要必须要必须要手动释放锁,必须要必须要必须要手动释放锁(重要的事情说三遍)</span></span><br><span class="line">                        <span class="comment">// 使用syn锁定的话如果遇到异常，jvm会手动释放锁，但是lock必须手动释放锁</span></span><br><span class="line">                        lock.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//简单处理，休眠主线程等上面的计算线程完成。</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ReentrantLock 非公平锁原码阅读</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> ReentrantLock lock &#x3D; new ReentrantLock();</span><br><span class="line"> lock.lock();  &#x2F;&#x2F;从断点跟踪</span><br><span class="line"> </span><br><span class="line"> public void lock() &#123;</span><br><span class="line">     sync.acquire(1);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> public final void acquire(int arg) &#123;</span><br><span class="line">     if (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">         acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">         selfInterrupt();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> final boolean nonfairTryAcquire(int acquires) &#123;</span><br><span class="line">     final Thread current &#x3D; Thread.currentThread();</span><br><span class="line">     int c &#x3D; getState(); &#x2F;&#x2F;the current value of synchronization state.</span><br><span class="line">     if (c &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        &#x2F;&#x2F;如果当前对象没有锁，直接设置一个排它锁</span><br><span class="line">         if (compareAndSetState(0, acquires)) &#123;</span><br><span class="line">             setExclusiveOwnerThread(current);</span><br><span class="line">             return true;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     else if (current &#x3D;&#x3D; getExclusiveOwnerThread()) &#123;</span><br><span class="line">        &#x2F;&#x2F; 如果当前持有锁的是同一个线程，则设置为可重入</span><br><span class="line">         int nextc &#x3D; c + acquires;</span><br><span class="line">         if (nextc &lt; 0) &#x2F;&#x2F; overflow</span><br><span class="line">             throw new Error(&quot;Maximum lock count exceeded&quot;);</span><br><span class="line">         setState(nextc);</span><br><span class="line">         return true;</span><br><span class="line">     &#125;</span><br><span class="line">     return false; &#x2F;&#x2F;没拿到锁，返回fallse</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> private Node addWaiter(Node mode) &#123;</span><br><span class="line">     &#x2F;&#x2F;mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared, </span><br><span class="line">     &#x2F;&#x2F;now 一个共享锁或排它锁节点</span><br><span class="line">     Node node &#x3D; new Node(mode);  </span><br><span class="line">    </span><br><span class="line">     &#x2F;&#x2F;取出队列中最后一个节点，设置为该新节点的上一个节点。并返回新节点。</span><br><span class="line">     &#x2F;&#x2F;如果最后一个节点为空，初使化一个同步队列</span><br><span class="line">     for (;;) &#123;</span><br><span class="line">         Node oldTail &#x3D; tail;</span><br><span class="line">         if (oldTail !&#x3D; null) &#123;</span><br><span class="line">             node.setPrevRelaxed(oldTail);</span><br><span class="line">             if (compareAndSetTail(oldTail, node)) &#123;</span><br><span class="line">                 oldTail.next &#x3D; node;</span><br><span class="line">                 return node;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">             initializeSyncQueue();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">final boolean acquireQueued(final Node node, int arg) &#123;</span><br><span class="line">    boolean interrupted &#x3D; false;</span><br><span class="line">    try &#123;</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            final Node p &#x3D; node.predecessor();</span><br><span class="line">            &#x2F;&#x2F;取出前面新new 节点，判断上一个节点，是不是头部节点，如果是的话，直接再次尝试拿锁。</span><br><span class="line">            &#x2F;&#x2F;如果拿锁成功，那新节点，就是头部节点</span><br><span class="line">            if (p &#x3D;&#x3D; head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next &#x3D; null; &#x2F;&#x2F; help GC</span><br><span class="line">                return interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;判断是否继续自旋拿锁，还是park</span><br><span class="line">            if (shouldParkAfterFailedAcquire(p, node))</span><br><span class="line">                interrupted |&#x3D; parkAndCheckInterrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        cancelAcquire(node);</span><br><span class="line">        if (interrupted)</span><br><span class="line">            selfInterrupt();</span><br><span class="line">        throw t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h6 id="2-CountDownLatch"><a href="#2-CountDownLatch" class="headerlink" title="2.CountDownLatch"></a>2.CountDownLatch</h6><p>倒数，Latch是门栓的意思(倒数的一个门栓，5、4、3、2、1数到了，我这个门栓就开 了)<br>刚前面的递增方法，用的休眠主线程等计算线程完成后，再打印结果，这并不好，我们用CountDownLatch 改造下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Incrementer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> Long counter1 = Long.valueOf(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">static</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (Incrementer<span class="class">.<span class="keyword">class</span>) </span>&#123;  <span class="comment">//去掉锁之后结果就有问题</span></span><br><span class="line">                        counter1++;</span><br><span class="line">                        latch.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">                        <span class="comment">//添加休眠，方便对比结果。</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"创建线程完成,等待结果。"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await(); <span class="comment">//这里会阻塞住，等latch 倒数到0的时候，才会继续执行</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(counter1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-CyclicBarrier"><a href="#3-CyclicBarrier" class="headerlink" title="3. CyclicBarrier"></a>3. CyclicBarrier</h6><p>循环栅栏，这有一个栅栏，什么时候人满了就把栅栏推倒， 哗啦哗啦的都放出去，出去之后扎栅栏又重新起来，再来人，满了，推倒之后又继续。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusDispatcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">10</span>, ()-&gt;&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">" - 人满了发车。。。。。"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"第"</span>+(++num)+<span class="string">"个人上车"</span>);</span><br><span class="line">                    latch.countDown();</span><br><span class="line">                    barrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"人车调度任务完成。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-Phaser"><a href="#4-Phaser" class="headerlink" title="4. Phaser"></a>4. Phaser</h6><p>Phaser它就更像是结合了CountDownLatch和CyclicBarrier，翻译一下叫阶段。<br>Phaser是按照不同的阶段来对线程进行执行，就是它本身是维护着一个阶段这样的一个成员变量，当前 我是执行到那个阶段，是第0个，还是第1个阶段啊等等，每个阶段不同的时候这个线程都可以往前走， 有的线程走到某个阶段就停了，有的线程一直会走到结束。你的程序中如果说用到分好几个阶段执行 ， 而且有的人必须得几个人共同参与的一种情形的情况下可能会用到这个Phaser。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhaserTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> GamePhaser phaser = <span class="keyword">new</span> GamePhaser(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                sleepSeconds(<span class="number">1</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" 到"</span>);</span><br><span class="line">                phaser.arriveAndAwaitAdvance();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"玩第一个游戏。。。"</span>);</span><br><span class="line">                sleepSeconds(<span class="number">2</span>);</span><br><span class="line">                phaser.arriveAndAwaitAdvance();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"玩第二个游戏。。。"</span>);</span><br><span class="line">                sleepSeconds(<span class="number">3</span>);</span><br><span class="line">                phaser.arriveAndAwaitAdvance();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"玩第三个游戏。。。"</span>);</span><br><span class="line">                sleepSeconds(<span class="number">4</span>);</span><br><span class="line">                phaser.arriveAndAwaitAdvance();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"玩第四个游戏。。。"</span>);</span><br><span class="line">                sleepSeconds(<span class="number">5</span>);</span><br><span class="line">                phaser.arriveAndAwaitAdvance();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"准备离开。。。"</span>);</span><br><span class="line">                sleepSeconds(<span class="number">2</span>);</span><br><span class="line">                phaser.arriveAndAwaitAdvance();</span><br><span class="line">            &#125;,<span class="string">"00"</span>+(i+<span class="number">1</span>)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleepSeconds</span><span class="params">(<span class="keyword">int</span> seconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(seconds);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePhaser</span> <span class="keyword">extends</span> <span class="title">Phaser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GamePhaser</span><span class="params">(<span class="keyword">int</span> parties)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(parties);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> phase             第几个阶段，</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> registeredParties 当前有多少线程参与</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> if this phaser should terminate, 是否要结束phaser</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onAdvance</span><span class="params">(<span class="keyword">int</span> phase, <span class="keyword">int</span> registeredParties)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (phase) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    System.out.println(<span class="string">"registeredParties:"</span> + registeredParties);</span><br><span class="line">                    System.out.println(<span class="string">"完成第"</span> + phase + <span class="string">"阶段， 当前时间(秒)"</span> + System.currentTimeMillis() / <span class="number">1000</span>);</span><br><span class="line">                    System.out.println(<span class="string">"人到齐了开始玩第一个游戏^-^"</span>);</span><br><span class="line">                    System.out.println(<span class="string">""</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">"registeredParties:"</span> + registeredParties);</span><br><span class="line">                    System.out.println(<span class="string">"完成第"</span> + phase + <span class="string">"阶段， 当前时间(秒)"</span> + System.currentTimeMillis() / <span class="number">1000</span>);</span><br><span class="line">                    System.out.println(<span class="string">"开始玩第二个游戏^-^"</span>);</span><br><span class="line">                    System.out.println(<span class="string">""</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">"registeredParties:"</span> + registeredParties);</span><br><span class="line">                    System.out.println(<span class="string">"完成第"</span> + phase + <span class="string">"阶段， 当前时间(秒)"</span> + System.currentTimeMillis() / <span class="number">1000</span>);</span><br><span class="line">                    System.out.println(<span class="string">"开始玩第三个游戏^-^"</span>);</span><br><span class="line">                    System.out.println(<span class="string">""</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">"registeredParties:"</span> + registeredParties);</span><br><span class="line">                    System.out.println(<span class="string">"完成第"</span> + phase + <span class="string">"阶段， 当前时间(秒)"</span> + System.currentTimeMillis() / <span class="number">1000</span>);</span><br><span class="line">                    System.out.println(<span class="string">"开始玩第四个游戏^-^"</span>);</span><br><span class="line">                    System.out.println(<span class="string">""</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.out.println(<span class="string">"registeredParties:"</span> + registeredParties);</span><br><span class="line">                    System.out.println(<span class="string">"完成第"</span> + phase + <span class="string">"阶段， 当前时间(秒)"</span> + System.currentTimeMillis() / <span class="number">1000</span>);</span><br><span class="line">                    System.out.println(<span class="string">"游戏结束了，谢谢参与 ^-^"</span>);</span><br><span class="line">                    System.out.println(<span class="string">""</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="5-ReadWriteLock"><a href="#5-ReadWriteLock" class="headerlink" title="5. ReadWriteLock"></a>5. ReadWriteLock</h6><p>这个ReadWriteLock 是读写锁。读写锁的概念其实就是共享锁和排他锁，读锁就是共享锁，写锁就是排他锁。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="keyword">static</span> Lock readLock = readWriteLock.readLock();</span><br><span class="line">    <span class="keyword">static</span> Lock writeLock = readWriteLock.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arges)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//读线程不用阻塞，可以并发完成工作</span></span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                readLock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ReadWriteLockTest.read();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//记得Reentrant</span></span><br><span class="line">                    readLock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写线程会阻塞，需要排序完成任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                writeLock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ReadWriteLockTest.write(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    writeLock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"read value ="</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        value += num;</span><br><span class="line">        System.out.println(<span class="string">"write value ="</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="6-Semaphore"><a href="#6-Semaphore" class="headerlink" title="6. Semaphore"></a>6. Semaphore</h6><p>Semaphore 含义就是限流，比如说流水线人不能全去上洗手间吧，所以得限制，每个上洗手间的人必须要领到洗手卡才能去，没有卡的人得等着前面的人回来，并归还了卡。<br>默认Semaphore是非公平的，new Semaphore(2, true)第二个值传true才是设置公平  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义限制数量</span></span><br><span class="line">    <span class="keyword">static</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">2</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"想上厕所,排队领洗手卡。。。"</span>);</span><br><span class="line">                    semaphore.acquire(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(<span class="string">"时间（秒）:"</span>+System.currentTimeMillis()/<span class="number">1000</span>+<span class="string">"，"</span>+Thread.currentThread().getName()+<span class="string">"等到洗手卡了，上厕所ing。。。"</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//用完了一定要记得归还release, 不然后边的人就没得用了。</span></span><br><span class="line">                    semaphore.release(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="string">"姓名"</span>+(<span class="number">1</span>+i)).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="7-Exchanger"><a href="#7-Exchanger" class="headerlink" title="7. Exchanger"></a>7. Exchanger</h6><p>交换器，俩人之间互相交换个数据用的，这里收到的消息得是成对的，否则 Exchanger 一直在等待有人来交换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String contents = exchanger.exchange(Thread.currentThread().getName());</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" 收到消息："</span> + contents);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"thread 001"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String contents = exchanger.exchange(Thread.currentThread().getName());</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" 收到消息："</span> + contents);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"thread 002"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String contents = exchanger.exchange(Thread.currentThread().getName());</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" 收到消息："</span> + contents);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"thread 003"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String contents = exchanger.exchange(Thread.currentThread().getName());</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" 收到消息："</span> + contents);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"thread 004"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="十、LockSuport"><a href="#十、LockSuport" class="headerlink" title="十、LockSuport"></a>十、LockSuport</h4><p>*在JDK1.6中的java.util.concurrent的子包locks中引了LockSupport这个API，LockSupport是一个比较底层的工具类，用来创建锁和其他同步工具类的基本线程阻塞原语。java锁和同步器框架的核心 AQS: AbstractQueuedSynchronizer，就是通过调用 LockSupport.park()和 LockSupport.unpark()的方法，来实现线程的阻塞和唤醒的。</p>
<p>LockSuport的几个特点</p>
<ol>
<li>LockSupport不需要synchornized加锁就可以实现线程的阻塞和唤醒 </li>
<li>LockSupport.unpartk()可以先于LockSupport.park()执行，并且线程不会阻塞 </li>
<li>如果一个线程处于等待状态，连续调用了两次park()方法，就会使该线程永远无法被唤醒</li>
<li>park()和unpark()方法的实现是由Unsefa类提供的，而Unsefa类是由C和C++语言完成的，它主要通过一个变量作为一个标识，变量值在0，1之间来回切换，当这个变量大于0的时候线程就获得了“令牌”，其实park()和unpark()方法就是在改变这个变量的值，来达到线程的阻塞和唤醒的<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LockSuport 要求用线程顺序打印A1B2C3....Z26</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span>[] letters = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> Thread letterPrinter = <span class="keyword">new</span> Thread(LetterThread::print);</span><br><span class="line">    <span class="keyword">static</span> Thread numPrinter = <span class="keyword">new</span> Thread(NumThread::print);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        letterPrinter.start();</span><br><span class="line">        numPrinter.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LetterThread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; letters.length; i++) &#123;</span><br><span class="line">                System.out.print(letters[i]);</span><br><span class="line">                LockSupport.unpark(numPrinter);</span><br><span class="line">                <span class="keyword">if</span>(i &lt; letters.length -<span class="number">1</span>)&#123;</span><br><span class="line">                    LockSupport.park();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                System.out.print(nums[i]);</span><br><span class="line">                LockSupport.unpark(letterPrinter);</span><br><span class="line">                <span class="keyword">if</span>(i &lt; letters.length -<span class="number">1</span>)&#123;</span><br><span class="line">                    LockSupport.park();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="十一、Java的四种引用-强、软、弱、虚"><a href="#十一、Java的四种引用-强、软、弱、虚" class="headerlink" title="十一、Java的四种引用 强、软、弱、虚"></a>十一、Java的四种引用 强、软、弱、虚</h4><ul>
<li>比如Object o = new Object()，这就是普通的引用，也就是强引用，只要有一个应用指向这个对象，那么垃圾回收器一定不会回收它。</li>
<li>软引用 SoftReference&lt;byte[]&gt; m = new SoftReference&lt;&gt;(new byte[1024102410])<br>当有一个对象(字节数组)被一个软引用所指向的时候，只有系统内存不够 用的时候，才会回收它(字节数组)</li>
<li>弱引用 WeakReference m = new WeakReference&lt;&gt;(new M())<br>只要遭遇到gc就会回收</li>
<li>虚引用 PhantomReference<M> phantomReference = new PhantomReference&lt;&gt;(new M(), QUEUE);<br>对于虚引用它就干一件事，它就是管理堆外内存的，<br>首先第一点，这个虚引用的构造方法至少都是两个参数的，<br>第二个参数还必须是一个队列，这个虚引用基本没用，就是说不是给你用的，那么它是给谁用的呢?是给写JVM(虚拟机)的人用的  </M></li>
</ul>
<h4 id="十二、并发容器"><a href="#十二、并发容器" class="headerlink" title="十二、并发容器"></a>十二、并发容器</h4><p>容器 分两大类Collection、Map，Collection又分三大类List、Set、Queue队列</p>
<h6 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h6><p>Set 与List,Queue 的主要区别是不会有重复元素</p>
<h6 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h6><ul>
<li><strong>Queue 实现的实际上是一个队列，有进有出，它实现了很多对线程友好的API offer、peek、poll，他的一个子类型叫 BlockingQueue对线程友好的API又添加了put和take，这两个实现了阻塞操作，这个是在其他的List、 Set里面都是没有的。这里面最重要的就是是叫做阻塞队列，它的实现的初衷就是为了线程池、高并发做准备的。</strong></li>
<li>Queue里面还有一个子接口叫Deque叫双端队列，一般的队列只是从一端往里扔从另一端往外取。 Deque就是说你可以从反方向装从另外一个方向取。</li>
</ul>
<table>
<thead>
<tr>
<th>Queue Method</th>
<th>Equivalent Deque Method</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>add(e)</td>
<td>addLast(e)</td>
<td>向队尾插入元素，失败则抛出异常</td>
</tr>
<tr>
<td>offer(e)</td>
<td>offerLast(e)</td>
<td>向队尾插入元素，失败则返回false</td>
</tr>
<tr>
<td>remove(e)</td>
<td>removeFirst(e)</td>
<td>获取并删除首元素，失败则抛出异常</td>
</tr>
<tr>
<td>poll(e)</td>
<td>pollFirst(e)</td>
<td>获取并删除首元素，失败则返回null</td>
</tr>
<tr>
<td>element(e)</td>
<td>getFirst(e)</td>
<td>获取但不删除首元素，失败则抛出异常</td>
</tr>
<tr>
<td>peek(e)</td>
<td>peekFirst(e)</td>
<td>获取但不删除首元素，失败则返回null</td>
</tr>
</tbody></table>
<h6 id="ArrayList-amp-LinkedList"><a href="#ArrayList-amp-LinkedList" class="headerlink" title="ArrayList &amp; LinkedList"></a>ArrayList &amp; LinkedList</h6><ul>
<li>没有加锁，线程不安全。  </li>
<li>ArrayList是基于数组实现的，LinkedList是基于双链表实现的。</li>
<li>LinkedList还实现了Deque接口，Deque接口是Queue接口的子接口，它代表一个双向队列，因此LinkedList可以作为双向对列。</li>
<li>因为Array是基于索引(index)的数据结构，它使用索引在数组中搜索和读取数据是很快的，可以直接返回数组中index位置的元素，因此在随机访问集合元素上有较好的性能。Array获取数据的时间复杂度是O(1),但是要插入、删除数据却是开销很大的，因为这需要移动数组中插入位置之后的的所有元素。</li>
<li>相对于ArrayList，LinkedList的随机访问集合元素时性能较差，因为需要在双向列表中找到要index的位置，再返回；但在插入，删除操作是更快的。</li>
</ul>
<h6 id="Vector-amp-HashTable"><a href="#Vector-amp-HashTable" class="headerlink" title="Vector &amp; HashTable"></a>Vector &amp; HashTable</h6><p>最开始java1.0容器里只有两个，第一个叫Vector可以单独的往里扔，还有一个是Hashtable是可以一对一对往里扔的。Vector相对于实现了List接口，Hashtable实现了Map接口，Vector 和 Hashtable 自带锁所以性能低。</p>
<h6 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h6><p>HashMap没有锁，线程不安全,他虽然速度比较快，但是多线程时数据会出问题。</p>
<h6 id="Collections-synchronizedHashMap"><a href="#Collections-synchronizedHashMap" class="headerlink" title="Collections.synchronizedHashMap"></a>Collections.synchronizedHashMap</h6><p>Map&lt;String,String&gt; map = Collections.synchronizedMap(new HashMap&lt;String,String&gt;());<br>用的是SynchronizedMap这个方法，给HashMap我们手动加锁，它的源码自己做了一个Object，然后每次都是SynchronizedObject，严格来讲他和那个Hashtable效率上区别不大。</p>
<h5 id="ConcurrentMap-接口"><a href="#ConcurrentMap-接口" class="headerlink" title="ConcurrentMap 接口"></a>ConcurrentMap 接口</h5><h6 id="ConcurrentHashMap-amp-ConcurrentSkipListMap"><a href="#ConcurrentHashMap-amp-ConcurrentSkipListMap" class="headerlink" title="ConcurrentHashMap &amp; ConcurrentSkipListMap"></a>ConcurrentHashMap &amp; ConcurrentSkipListMap</h6><p>ConcurrentHashMap是多线程里面真正用的，提高效率主要提高在读上面，由于它往里插的时候内部又做了各种各样的判断，本来是链表的，到8之后又变成了红黑树，然后里面又做了各种各样的cas的判断，所以他往里插的数据是要更低一些的。<br>ConcurrentSkipListMap 通过<strong>跳表</strong>来实现的高并发容器并且这个Map是有排序的;<br>这两个的区别一个是有序的一个是无序的，同时都支持并发的操作</p>
<h5 id="CopyOnWrite"><a href="#CopyOnWrite" class="headerlink" title="CopyOnWrite"></a>CopyOnWrite</h5><h6 id="CopyOnWriteArrayList-amp-CopyOnWriteArraySet-amp-CopyOnWriteMap"><a href="#CopyOnWriteArrayList-amp-CopyOnWriteArraySet-amp-CopyOnWriteMap" class="headerlink" title="CopyOnWriteArrayList &amp; CopyOnWriteArraySet &amp; CopyOnWriteMap"></a>CopyOnWriteArrayList &amp; CopyOnWriteArraySet &amp; CopyOnWriteMap</h6><p>写时复制，当Write的时候我们要进行复制。这个原码非常简单，当我们需要往里面加元素的时候，把里面的元素得复制出来，再添加一个位置存放新元素。 而且在写的时个有加锁，但在读的时候没有锁。在写的时候特别少，读的时候很多的情况下，在这个时候就可以考虑CopyOnWrite这种方式来提高效率。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;CopyOnWriteMap.put方法</span><br><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    synchronized(this) &#123;</span><br><span class="line">        Map&lt;K, V&gt; newMap &#x3D; new HashMap(this.internalMap);</span><br><span class="line">        V val &#x3D; newMap.put(key, value);</span><br><span class="line">        this.internalMap &#x3D; newMap;</span><br><span class="line">        return val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;CopyOnWriteArrayList.add</span><br><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    synchronized (lock) &#123;</span><br><span class="line">        Object[] es &#x3D; getArray();</span><br><span class="line">        int len &#x3D; es.length;</span><br><span class="line">        es &#x3D; Arrays.copyOf(es, len + 1);</span><br><span class="line">        es[len] &#x3D; e;</span><br><span class="line">        setArray(es);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;CopyOnWriteArraySet 中实际是由CopyOnWriteArrayList存放的，在add的时候直接调用的CopyOnWriteArrayList.addIfAbsent(...)</span><br></pre></td></tr></table></figure>

<h5 id="BlockingQueue-接口"><a href="#BlockingQueue-接口" class="headerlink" title="BlockingQueue 接口"></a>BlockingQueue 接口</h5><p>BlockingQueue的概念重点是在Blocking上，Blocking阻塞，Queue队列，是阻塞队列。<br>BlockingQueue在 Queue的基础上又添加了两个方法，这两个方法一个叫put，一个叫take。这两个方法是真真正正的实现了阻塞。put往里装如果满了的话我这个线程会阻塞住，take往外取如果空了的话线程会阻塞住。所 以这个BlockingQueue就实现了生产者消费者里面的那个容器。</p>
<h6 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h6><p>用链表实现的BlockingQueue，是一个无界队列</p>
<h6 id="ArrayBlockingqueue"><a href="#ArrayBlockingqueue" class="headerlink" title="ArrayBlockingqueue"></a>ArrayBlockingqueue</h6><p>ArrayBlockingQueue是有界的，可以指定它一个固定的值10，它容器就是10，那么当你往里面扔容器的时候，一旦他满了这个put方法就会阻塞住。然后你可以看看用add方法满了之后他会报异常。 offer用返回值来判断到底加没加成功，offer还有另外一个写法你可以指定一个时间尝试着往里面加1秒钟，1秒钟之后如果加不进去它就返回了.</p>
<h6 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h6><p>DelayQueue可以实现在时间上的排序，这个DelayQueue能实现按照在里面等待的时间来进行排序。</p>
<h6 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h6><p>SynchronousQueue容量为0，就是这个东西它不是用来装内容的，SynchronousQueue是专门用来两 个线程之间传内容的，给线程下达任务。<br>这个Queue和其他的很重要的区别就是 你不能往里头装东西，只能用来阻塞式的put调用，要求是前面得有人等着拿这个东西的时候你才可以 往里装，但容量为0，其实说白了就是我要递到另外一个的手里才可以。</p>
<h6 id="TransferQueue"><a href="#TransferQueue" class="headerlink" title="TransferQueue"></a>TransferQueue</h6><p>TransferQueue传递，实际上是前面这各种各样Queue的一个组合，它可以给线程来传递任务，以此同时不像是SynchronousQueue只能传递一个，TransferQueue做成列表可以传好多个。比较牛X的是它添加了一个方法叫transfer，如果我们用put就相当于一个线程来了往里一装它就走了。transfer就是装完在这等着，阻塞等有人把它取走我这个线程才回去干我自己的事情。<br>一般使用场景:是我做了一件事情，我这个事情要求有一个结果，有了这个结果之后我可以继续进行我下面的这个事情的时候，比方说 我付了钱，这个订单我付账完成了，但是我一直要等这个付账的结果完成才可以给客户反馈。  </p>
<h4 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h4><p>PriorityQueue特点是它内部你往里装的时候并不是按顺序往里装的，而是内部进行了一个排序。</p>
<h4 id="十三、线程池"><a href="#十三、线程池" class="headerlink" title="十三、线程池"></a>十三、线程池</h4><h6 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h6><p>执行者，是一个接口类，他有一个方法叫执行，那么执行的东西是 Runnable。</p>
<h6 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h6><p>是从Executor继承，除了去实现Executor可以去执行一个任务之外，还完善了整个任务执行器的一个生命周期，就拿线程池来举例子，一个线程池里面一堆的线程就是一堆的工人，执行完一个任务之后我这个线程怎么结束啊；<br>线程池定义了这样一些个方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void shutdown();&#x2F;&#x2F;结束</span><br><span class="line">List&lt;Runnable&gt; shutdownNow();&#x2F;&#x2F;马上结束</span><br><span class="line">boolean isShutdown();&#x2F;&#x2F;是否结束了</span><br><span class="line">boolean isTerminated();&#x2F;&#x2F;是不是整体都执行完了</span><br><span class="line">boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;&#x2F;&#x2F;等着结束，等多长时间，时间到了还不结束的话他 就返回false</span><br><span class="line">&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</span><br><span class="line">Future&lt;?&gt; submit(Runnable task);</span><br><span class="line">List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks) throws InterruptedException;</span><br><span class="line">&lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks) throws InterruptedException, ExecutionException;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutroServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService es = Executors.newCachedThreadPool();</span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> FutureTask(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"Executor Service Test"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        es.execute(task);</span><br><span class="line">        es.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>他是实现了一些个线程的线程池的生命周期的东西，扩展了Executor的接口，真正的线程池的现实是在ExecutorService的这个基础上来实现的。<br>ExecutorService的时候你会发现他除了Executor执行任务之外还有submit提交任务，执行任务是直接拿过来马上运行，而submit是扔给这个线程池，什么时候运行由这个线程池来决定，相当于 是异步的，我只要往里面一扔就不管了。那好，如果不管的话什么时候他有结果啊，这里面就涉及了比较新的类:比如说Future、RunnableFuture、FutureTask。</p>
<h6 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h6><p>以前定义一个线程的任务只能去实现Runnable接口，那在1.5之后他就增加了Callable这个接口。<br>Callable是什么，他类似于Runnable，不过 Callable可以有返回值。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes a result, or throws an exception if unable to do so.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> computed result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception if unable to compute a result</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h6><p>Future代表的是那个Callable被执行完了之后我怎么才能拿到那个结果啊，它会封装到一个Future里面。<br>Future将来，未来。未来你执行完之后可以把这个结果放到这个未来有可能执行完的结果里头，所以Future代表的是未来执行完的一个结果。<br>把Callable的任务扔给线程池，线程池异步的执行完了，就是把任务交给线程池之后，调用get方法直到有结果之后get会返回。Callable一般是配合线程池和Future来用的。</p>
<h6 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h6><p>其实更灵活的一个用法是FutureTask，即是一个Future同时又是一个Task，原来这Callable只能一个Task只能是一个任务但是他不能作为一个Future来用。这个FutureTask相当于是我自己可以作为一个任务来用，同时这个任务完成之后的结果也存在于这个对象里，为什么他能做到这一点，因 为FutureTask他实现了RunnableFuture，而RunnableFuture即实现了Runnable又实现了Future，所以他即是一个任务又是一个Future</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutrueTaskTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FutureTask task = <span class="keyword">new</span> FutureTask(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"future task test"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h6><p>CompletableFuture他的底层用的是ForkJoinPool，底层特别复杂，但是用法特别灵活。</p>
<h5 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h5><p>目前JDK提供的有两种类型</p>
<ol>
<li>ThreadPoolExecutor 普通的线程池</li>
<li>ForkJoinPool</li>
</ol>
<h6 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h6><p>ThreadPoolExecutor他的父类是AbstractExecutorService，AbstractExecutorService 实现了 ExecutorService，再ExecutorService的父类是Executor，所以ThreadPoolExecutor就相当于线程池的执行器  </p>
<p>定义这一个线程池，这里面的七个参数:</p>
<ol>
<li>corePoolSoze 核心线程数，最开始的时候是有这个线程池里面是有一定的核心线程数 的;</li>
<li>maximumPoolSize 最大线程数，线程数不够了，能扩展到最大线程是多少; </li>
<li>keepAliveTime 生存时间，意思是这个线程有很长时间没干活了请你把它归还给操作系</li>
<li>TimeUnit.SECONDS 生存时间的单位到底是毫秒纳秒还是秒自己去定义;</li>
<li>任务队列，就是我们前面讲的BlockingQueue，各种各样的BlockingQueue都可以;</li>
<li>线程工厂, 要去实现ThreadFactory的接口，这个接口只有一个方法叫newThread，所以就是产生线程的，可以通过这种方式产生自定义的线程，默认产生的是defaultThreadFactory，而defaultThreadFactory 产生线程的时候有几个特点: new出来的时候指定了group制定了线程名字，然后指定的这个线程 绝对不是守护线程，设定好你线程的优先级。自己可以定义产生的到底是什么样的线程，指定线程名叫什么(为什么要指定线程名称，有什么意义，就是可以方便出错是回溯);</li>
<li>拒绝策略，指的是线程池忙，而且任务队列满这种情况下我们就要执行各种各样的拒绝策略，<br>jdk默认提供了四种拒绝策略，也是可以自定义的。<ul>
<li>1:Abort:抛异常 </li>
<li>2:Discard:扔掉，不抛异常 </li>
<li>3:DiscardOldest:扔掉排队时间最久的 </li>
<li>4:CallerRuns:调用者处理服务<br>一般情况这四种我们会自定义策略，去实现这个拒绝策略的接口，处理的方式是一般我们的消息需要保存下来，并且记录日志。</li>
</ul>
</li>
</ol>
<h5 id="JDK给我们提供了一些默认的线程池的实现"><a href="#JDK给我们提供了一些默认的线程池的实现" class="headerlink" title="JDK给我们提供了一些默认的线程池的实现"></a>JDK给我们提供了一些默认的线程池的实现</h5><h6 id="1-SingleThreadPool"><a href="#1-SingleThreadPool" class="headerlink" title="1. SingleThreadPool"></a>1. SingleThreadPool</h6><p>只有一个线程，这个一个线程的线程池可以保证我们扔进去的任务是顺序执行的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExecutorService service &#x3D; Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">public static ExecutorService newSingleThreadExecutor() &#123;</span><br><span class="line">    return new FinalizableDelegatedExecutorService</span><br><span class="line">        (new ThreadPoolExecutor(1, 1,</span><br><span class="line">                                0L, TimeUnit.MILLISECONDS,</span><br><span class="line">                                new LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-CachedThreadPool"><a href="#2-CachedThreadPool" class="headerlink" title="2. CachedThreadPool"></a>2. CachedThreadPool</h6><p>CachedThreadPool的特点，就是你来一个任务我给你启动一个线程，当然前提是我的线程池里面有线程存在而且他还没有到达60秒钟的回收时间的时候，来一个任务，如果有线程存在我就用现有的线程，但是在有新的任务来的时候，如果其他线程忙就启动一个新的，CachedThreadPool用的任务队列是 synchronousQueue，它是一个手递手容量为空的Queue，就是你来一个东西必须得有一个线程把他拿走，不然我提交任务的线程从这阻塞住了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExecutorService executor &#x3D; Executors.newCachedThreadPool();</span><br><span class="line">public static ExecutorService newCachedThreadPool() &#123;</span><br><span class="line">    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span><br><span class="line">                                  60L, TimeUnit.SECONDS,</span><br><span class="line">                                  new SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-FixedThreadPool"><a href="#3-FixedThreadPool" class="headerlink" title="3. FixedThreadPool"></a>3. FixedThreadPool</h6><p>FixedThreadPool指定一个参数，到底有多少个线程，你看他的核心线程和最大线程都是固定的，因为他的最大线程和核心线程都是固定的就没有回收之说，所以把keepAliveTime指定成0，这里用的是LinkedBlockingQueue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExecutorService executor &#x3D; Executors.newFixedThreadPool(10);</span><br><span class="line">public static ExecutorService newFixedThreadPool(int nThreads) &#123;</span><br><span class="line">    return new ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  0L, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  new LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="4-ScheduledPool"><a href="#4-ScheduledPool" class="headerlink" title="4. ScheduledPool"></a>4. ScheduledPool</h6><p>定时任务线程池，隔一段时间之后这个任务会执行。这个就是我们专门用来执行定时任务的一个线程池。看源码，我们newScheduledThreadPool的时 候他返回的是ScheduledThreadPoolExecutor，然后在ScheduledThreadPoolExecutor里面他调用了 super，他的super又是ThreadPoolExecutor，它本质上还是ThreadPoolExecutor，所以并不是别的，参数还是ThreadPool的七个参数。这是专门给定时任务用的这样的一个线程池。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExecutorService executor &#x3D; Executors.newScheduledThreadPool(10);</span><br><span class="line"></span><br><span class="line">public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) &#123;</span><br><span class="line">    return new ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public ScheduledThreadPoolExecutor(int corePoolSize) &#123;</span><br><span class="line">        super(corePoolSize, Integer.MAX_VALUE,</span><br><span class="line">              DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</span><br><span class="line">              new DelayedWorkQueue());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="5-WorkStealingPool-它实际上是new了一个ForkJoinPool"><a href="#5-WorkStealingPool-它实际上是new了一个ForkJoinPool" class="headerlink" title="5. WorkStealingPool (它实际上是new了一个ForkJoinPool)"></a>5. WorkStealingPool (它实际上是new了一个ForkJoinPool)</h6><p>WorkStealing指的是和原来线程池的区别每一个线程都有自己单独队列，所以任务不断往里扔的时候它会在每一个线程的队列上不断的累积，让某一个线程执行完自己的任务之后就回去另外一个线程上面偷，所以这个叫WorkStealing。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExecutorService executor &#x3D; Executors.newWorkStealingPool();</span><br><span class="line"></span><br><span class="line">public static ExecutorService newWorkStealingPool() &#123;</span><br><span class="line">    return new ForkJoinPool</span><br><span class="line">        (Runtime.getRuntime().availableProcessors(),</span><br><span class="line">         ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class="line">         null, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="6-ForkJoinPool"><a href="#6-ForkJoinPool" class="headerlink" title="6. ForkJoinPool"></a>6. ForkJoinPool</h6><p>它适合把大任务切分成一个一个的小任务去运行，小任务还是觉得比较大，再切。切完这个任务执行完了要进行一个汇总。</p>
<h6 id="Cache-vs-Fixed"><a href="#Cache-vs-Fixed" class="headerlink" title="Cache vs Fixed"></a>Cache vs Fixed</h6><p>什么时候用Cache什么时候用Fixed，你得精确的控制有多少个线程数，控制数量问题多数情况下得预估并发量。如果线程池中的数量过多，最终他们会竞争稀缺的处理器和内存资源，浪费大量的时间在上下文切换上，反之，如果线程的数目过少，正如你的应用所面临的情况，处理器的一些核可能就无法充分利用。<br>《Java并发编程实战》作者 Brian Goetz建议，线程池大小与处理器的利用率之比可以使用公式来进行计算估算:线程池=你有多少个cpu 乘以 cpu期望利用率 乘以 (1+ W/C)。W除以C是等待时间与计算时间的比率。</p>
<h6 id="线程池的一些5种状态"><a href="#线程池的一些5种状态" class="headerlink" title="线程池的一些5种状态"></a>线程池的一些5种状态</h6><ol>
<li>RUNNING:正常运行的;</li>
<li>SHUTDOWN:调用了shutdown方法了进入了shutdown状态; </li>
<li>STOP:调用了shutdownnow马上让他停止; </li>
<li>TIDYING:调用了shutdown然后这个线程也执行完了，现在正在整理的这个过程叫TIDYING; </li>
<li>TERMINATED:整个线程全部结束;</li>
</ol>
<h4 id="十四、JMH"><a href="#十四、JMH" class="headerlink" title="十四、JMH"></a>十四、JMH</h4><p>JMH -java Microbenchmark Harness<br>微基准测试，它是测的某一个方法的性能。支持命令行或IDEA开发工具运行，idea运行需要添加插件。直接在Idea插件查找JMH安装。安装好后就可以像Junit一样写测试。<br>官网 <a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="noopener">http://openjdk.java.net/projects/code-tools/jmh/</a><br>Maven 引用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用示例,代码写在test目录下，类似junit测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Benchmark</span><br><span class="line">@Warmup(iteration&#x3D;1, time&#x3D;3)  &#x2F;&#x2F;在专业测试里面首先要进行预热，预热多少次，预热多少时间</span><br><span class="line">@Fork(5)  &#x2F;&#x2F;用多少个线程去执行我们的程序 </span><br><span class="line">@BenchmarkMode(Mode.Throughput)  &#x2F;&#x2F;是对基准测试的一个模式，这个模式用的最多的是 Throughput吞吐量</span><br><span class="line">@Measurement(iteration&#x3D;1, time&#x3D;3) &#x2F;&#x2F;是整个测试要测试多少遍，调用这个方法要调用多少次</span><br><span class="line">public void test() &#123;</span><br><span class="line">    &#x2F;&#x2F;.... 调用测试方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="十四、Disrupter"><a href="#十四、Disrupter" class="headerlink" title="十四、Disrupter"></a>十四、Disrupter</h4><p>主页：<a href="http://lmax-exchange.github.io/disruptor/" target="_blank" rel="noopener">http://lmax-exchange.github.io/disruptor/</a></p>
<p>源码：<a href="https://github.com/LMAX-Exchange/disruptor">https://github.com/LMAX-Exchange/disruptor</a></p>
<p>GettingStarted: <a href="https://github.com/LMAX-Exchange/disruptor/wiki/Getting-Started">https://github.com/LMAX-Exchange/disruptor/wiki/Getting-Started</a></p>
<p>api: <a href="http://lmax-exchange.github.io/disruptor/docs/index.html" target="_blank" rel="noopener">http://lmax-exchange.github.io/disruptor/docs/index.html</a></p>
<p>maven: <a href="https://mvnrepository.com/artifact/com.lmax/disruptor" target="_blank" rel="noopener">https://mvnrepository.com/artifact/com.lmax/disruptor</a></p>
<p>ifeve：<a href="http://ifeve.com/disruptor/" target="_blank" rel="noopener">http://ifeve.com/disruptor/</a></p>
<p>Disruptor 开源的并发框架，并获得2011 Duke’s 程序框架创新奖，能够在无锁的情况下实现网络的Queue并发操作。</p>
<ul>
<li>如果把它用作MQ的话，<strong>单机</strong>最快的MQ，性能非常的高，主要是它里面 用的全都是CAS, 另外把各种各样的性能开发到了极致。</li>
<li>Disruptor就是在内存里，Disruptor简单理解就是内存里用于存放元素的一个高效率的队列。</li>
<li>Disruptor叫无锁、高并发、环形Buffer，直接覆盖(不用清除)旧的数据，降低GC频率，用于生产者消费者模式</li>
<li>RingBuffer是一个环形队列，和其他队列不一样的是他是一个环形队列，环形的Buffer。一般情况下我们的容器是一个队列，不管你是用链表实现还是用数组实现的，它会是一个队列，那么这个队列生产者这 边使劲往里塞，消费者这边使劲往外拿，但Disruptor的核心是一个环形的buffer。</li>
<li>RingBuffer的序号，指向下一个可用的元素</li>
<li>采用数组实现，没有首尾指针对比ConcurrentLinkedQueue，用数组实现的速度更快<br>假如长度为8，当添加到第12个元素的时候在哪个序号上呢?用12%8<br>决定当Buffer被填满的时候到底是覆盖还是等待，由Produce决定 长度设为2的n次幂，利于二进制计算，例如:12%8=12&amp;(8-1)</li>
</ul>
<h6 id="等待策略"><a href="#等待策略" class="headerlink" title="等待策略"></a>等待策略</h6><ul>
<li>(常用)BlockingWaitStrategy:通过线程堵塞的方式，等待生产者唤醒，被唤醒后，再循环检查 依赖的sequence是否已经消费。</li>
<li>BusySpinWaitStrategy:线程一直自旋等待，可能比较耗cpu </li>
<li>LiteBlockingWaitStrategy:线程阻塞等待生产者唤醒，与BlockingWaitStrategy相比，区别在 signalNeeded.getAndSet，如果两个线程同时访问一个访问waitfor，一个访问signalAll时，可以 减少lock加锁次数 </li>
<li>LiteTimeoutBlockingWaitStrategy:与LiteBlockingWaitStrategy相比，设置了阻塞时间，超过时间后抛出异常 </li>
<li>PhasedBackoffWaitStrategy:根据时间参数和传入的等待策略来决定使用那种等待策略 </li>
<li>TimeoutBlockingWaitStrategy:相对于BlockingWaitStrategy来说，设置了等待时间，超过后抛 出异常</li>
<li>(常用)YieldingWaitStrategy:尝试100次，然后Thread.yield()让出cpu </li>
<li>(常用)SleepingWaitStrategy:sleep</li>
</ul>
]]></content>
      <tags>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular入门</title>
    <url>/2020/02/10/Angular%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Angular-环境搭建"><a href="#Angular-环境搭建" class="headerlink" title="Angular 环境搭建"></a>Angular 环境搭建</h1><p>1、安装前准备工作：<br>    1.1、安装nodejs<br>        安装nodejs的计算机上面必须安装nodejs, 建议安装最新稳定版本<br>        $ node -v<br>    1.2、安装cnpm<br>        npm可能安装包会失败，建议先用npm安装一下cnpm用淘宝镜像安装<br>        $ npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p>
<p>2、使用 npm/cnpm 命令安装 angular/cli (只需要安装一次)<br>    $ npm install -g @angular/cli    或者    cnpm install -g @angular/cli</p>
<a id="more"></a>
<p>Angular 创建项目<br>1、打开命令行工具找到你要创建项目的目录<br>2、创建项目<br>    ng new 项目名称<br>    直接安装:<br>    $ ng new angulardemo<br>    如果要跳过npm i 安装:<br>    $ ng new angulardemo –skip-install<br>    再手动用cnpm install 代替npm i安装<br>    $ cd angulardemo<br>    $ cnpm install<br>3、运行项目<br>    $ ng serve –open<br>    访问：<a href="http://localhost:4200" target="_blank" rel="noopener">http://localhost:4200</a> </p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>About me</title>
    <url>/about/index.html</url>
    <content><![CDATA[<h2 id="个人介绍"><a href="#个人介绍" class="headerlink" title="个人介绍"></a>个人介绍</h2><h2 id="兴趣爱好"><a href="#兴趣爱好" class="headerlink" title="兴趣爱好"></a>兴趣爱好</h2><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3>]]></content>
  </entry>
</search>
